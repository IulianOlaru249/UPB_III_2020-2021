variable w ::= { a, b, c };
variable x ::= { a, b, c };

GRgrammar ::= Grammar (
	nonterminals :: { S, S1, S2 } ;
	alphabet :: { a, b } ;
	start_symbol :: S ;

	S -> a&S | b&S | a&S1 ;
	S1 -> b&S2 | e ;
	S2 -> a&S2 | aa ;
) ;;

variable y ::= { a, b, c };

GICgrammar ::= Grammar (
	alphabet :: { a, b } ;
	nonterminals :: { S, S2 } ;
	start_symbol :: S ;
	variable z ::= { a, b, c };

	S -> a&S&a | b&S&b | S1;
	S2 -> y&S1 | b&S1 | e ;
) ;;

variable a ::= { a, b, c };

automata2 ::=  PushDownAutomata (
	alphabet :: { m, n, o, p } ;
	variable b ::= { asd, gfd, rew };
	stack_alphabet :: { Y1, X } ;
	states :: { q0, q1, q2 } ; 
	final_states :: { q4, q0 } ;
	initial_state :: q0 ;
	variable y ::= { a, b } ;

	q0 -> (
		y, z0 / X&Y1 -> q1 ;
	) ;

	q1 -> (
		m, X / X&X -> q1 ;
		n, X / e -> q2 ;
	) ;
	
	q2 -> (
		n, X / e -> q2 ;
		o, Y1 / X&Y1 -> q3 ;
	) ;
	
) ;;

